# -*- coding: utf-8 -*-
"""train.py

Automatically generated by Colaboratory.


"""

# Imports
import numpy as np
import os

from tflite_model_maker.config import ExportFormat, QuantizationConfig
from tflite_model_maker import model_spec
from tflite_model_maker import object_detector

from tflite_support import metadata

import tensorflow as tf
assert tf.__version__.startswith('2')

tf.get_logger().setLevel('ERROR')
from absl import logging
logging.set_verbosity(logging.ERROR)

# Confirm TF Version
print("\nTensorflow Version:")
print(tf.__version__)
print()

# 1. Dataset Preparation
train = object_detector.DataLoader.from_pascal_voc(
    'drive/MyDrive/ColabNotebooks/Zira/Riverside_Yates.v1i.voc/train',
    'drive/MyDrive/ColabNotebooks/Zira/Riverside_Yates.v1i.voc/train',
    ['boards']
)

val = object_detector.DataLoader.from_pascal_voc(
    'drive/MyDrive/ColabNotebooks/Zira/Riverside_Yates.v1i.voc/valid',
    'drive/MyDrive/ColabNotebooks/Zira/Riverside_Yates.v1i.voc/valid',
    ['boards']
)

# test = object_detector.DataLoader.from_pascal_voc(
#     'drive/MyDrive/ColabNotebooks/Zira/Riverside_Yates.v1i.voc/test',
#     'drive/MyDrive/ColabNotebooks/Zira/Riverside_Yates.v1i.voc/test',
#     ['boards']
# )

# 2. Training Custom Model
# Load model spec
spec = model_spec.get('efficientdet_lite0')

# Train the model
model_short = object_detector.create(train, model_spec=spec, batch_size=4, train_whole_model=True, epochs=10)
# print("================ dir from create ==================")
# print(dir(model_short))
# help(model_short)
model_short.summary()
# *** From source: https://github.com/tensorflow/tensorflow/issues/60087
history = model_short.model.history
loss = history.history['loss']
# val_loss = history.history['val_loss']
print(loss)
# Dump the list to file
import pickle
with open("losses.pkl", "wb") as fp:   #Pickling
    pickle.dump(loss, fp)



#model_short_trn.summary()
# print("+++++ History +++++")
# hst = model_short_trn.fit(epochs=3)
# print("================ dir from fit ==================")
# print(dir(hst))
# print(hst.history)
# help(hst)
# # 3. Model Validation 
# eval_result = model.evaluate(val)

# # Print COCO metrics of Train Data
# # print("COCO metrics:")
# # for label, metric_value in eval_result.items():
# #     print(f"{label}: {metric_value}")

# # Add a line break after all the items have been printed
# print()

# # 4. Model Compilation
# model.export(export_dir='.', tflite_filename='boards.tflite')

# # Evaluate the tflite model
# tflite_eval_result = model.evaluate_tflite('boards.tflite', val)

# # Print COCO metrics for validation data
# print("COCO metrics tflite")
# for label, metric_value in tflite_eval_result.items():
#     print(f"{label}: {metric_value}")

# # 5. Apply Model Quantization
# config = QuantizationConfig.for_float16()
# model.export(export_dir='.', tflite_filename='quant.tflite', quantization_config=config)

# # Evaluate the quant.tflite model
# quant_tflite_eval_result = model.evaluate_tflite('quant.tflite', val)

# # Print COCO metrics for quantized model 
# print("COCO metrics quant.tflite")
# for label, metric_value in quant_tflite_eval_result.items():
#     print(f"{label}: {metric_value}")